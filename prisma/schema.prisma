// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id String @id
  firstName String
  lastName String
  dateJoined DateTime @default(now())
  password String
  role String @default("user")
  image String @default("empty")
  posts posts[]
  comments comments[]
  notifier notifications[] @relation(name: "notifier")
  notified notifications[] @relation(name: "notified")
  likes likes[]
  
}


model posts {
  id Int @id @default(autoincrement())
  title String @db.Text
  content String @db.Text
  userId String 
  categorieId String
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  categorie categorie @relation(fields: [categorieId], references: [id], onDelete: Cascade)
  dateCreated DateTime @default(now())
  comments comments[]
  notifications notifications[]
  likes likes []


}

model categorie{
  id String @unique
  dateCreated DateTime @default(now())
  lastUpdated DateTime @default(now())
  image String @db.Text @default("no img")
  content String @db.Text @default("")
  posts posts[]

  
}

model comments{
  id Int @unique @default(autoincrement())
  dateCommented DateTime @default(now())
  content String @db.Text
  postId Int
  userId String
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  post posts @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes likes []
  
}



model notifications{
  id Int @unique @default(autoincrement())
  content String @db.Text
  notifierId String
  notifiedId String
  notifier users @relation(name: "notifier", fields: [notifierId], references: [id], onDelete: Cascade)
  notified users @relation(name: "notified", fields: [notifiedId], references: [id], onDelete: Cascade)
  date DateTime @default(now())
  read Boolean @default(false)
  postId Int
  post posts @relation(fields: [postId], references: [id], onDelete: Cascade)
}


model likes{
  id Int @unique @default(autoincrement())
  dateLiked DateTime @default(now())
  userId String
  commentId Int?
  postId Int?
  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  post posts? @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment comments? @relation(fields: [commentId], references: [id], onDelete: Cascade)
}
